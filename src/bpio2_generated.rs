// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod bpio2 {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PACKET_TYPE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PACKET_TYPE: u8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PACKET_TYPE: [PacketType; 2] = [
  PacketType::I2CRWRequest,
  PacketType::I2CResponse,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PacketType(pub u8);
#[allow(non_upper_case_globals)]
impl PacketType {
  pub const I2CRWRequest: Self = Self(0);
  pub const I2CResponse: Self = Self(1);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::I2CRWRequest,
    Self::I2CResponse,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::I2CRWRequest => Some("I2CRWRequest"),
      Self::I2CResponse => Some("I2CResponse"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for PacketType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for PacketType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for PacketType {
    type Output = PacketType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for PacketType {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for PacketType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PacketType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PACKET_CONTENTS: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PACKET_CONTENTS: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PACKET_CONTENTS: [PacketContents; 3] = [
  PacketContents::NONE,
  PacketContents::I2CRWRequest,
  PacketContents::I2CResponse,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PacketContents(pub u8);
#[allow(non_upper_case_globals)]
impl PacketContents {
  pub const NONE: Self = Self(0);
  pub const I2CRWRequest: Self = Self(1);
  pub const I2CResponse: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::I2CRWRequest,
    Self::I2CResponse,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::I2CRWRequest => Some("I2CRWRequest"),
      Self::I2CResponse => Some("I2CResponse"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for PacketContents {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for PacketContents {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for PacketContents {
    type Output = PacketContents;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for PacketContents {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for PacketContents {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PacketContents {}
pub struct PacketContentsUnionTableOffset {}

pub enum I2CRWRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct I2CRWRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for I2CRWRequest<'a> {
  type Inner = I2CRWRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> I2CRWRequest<'a> {
  pub const VT_I2CSTART: flatbuffers::VOffsetT = 4;
  pub const VT_I2CADDR: flatbuffers::VOffsetT = 6;
  pub const VT_I2CDATA: flatbuffers::VOffsetT = 8;
  pub const VT_I2CREADBYTES: flatbuffers::VOffsetT = 10;
  pub const VT_I2CSTOP: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    I2CRWRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args I2CRWRequestArgs<'args>
  ) -> flatbuffers::WIPOffset<I2CRWRequest<'bldr>> {
    let mut builder = I2CRWRequestBuilder::new(_fbb);
    builder.add_i2creadbytes(args.i2creadbytes);
    if let Some(x) = args.i2cdata { builder.add_i2cdata(x); }
    builder.add_i2cstop(args.i2cstop);
    builder.add_i2caddr(args.i2caddr);
    builder.add_i2cstart(args.i2cstart);
    builder.finish()
  }


  #[inline]
  pub fn i2cstart(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(I2CRWRequest::VT_I2CSTART, Some(true)).unwrap()}
  }
  #[inline]
  pub fn i2caddr(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(I2CRWRequest::VT_I2CADDR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn i2cdata(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(I2CRWRequest::VT_I2CDATA, None)}
  }
  #[inline]
  pub fn i2creadbytes(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(I2CRWRequest::VT_I2CREADBYTES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn i2cstop(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(I2CRWRequest::VT_I2CSTOP, Some(true)).unwrap()}
  }
}

impl flatbuffers::Verifiable for I2CRWRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("i2cstart", Self::VT_I2CSTART, false)?
     .visit_field::<u8>("i2caddr", Self::VT_I2CADDR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("i2cdata", Self::VT_I2CDATA, false)?
     .visit_field::<u32>("i2creadbytes", Self::VT_I2CREADBYTES, false)?
     .visit_field::<bool>("i2cstop", Self::VT_I2CSTOP, false)?
     .finish();
    Ok(())
  }
}
pub struct I2CRWRequestArgs<'a> {
    pub i2cstart: bool,
    pub i2caddr: u8,
    pub i2cdata: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub i2creadbytes: u32,
    pub i2cstop: bool,
}
impl<'a> Default for I2CRWRequestArgs<'a> {
  #[inline]
  fn default() -> Self {
    I2CRWRequestArgs {
      i2cstart: true,
      i2caddr: 0,
      i2cdata: None,
      i2creadbytes: 0,
      i2cstop: true,
    }
  }
}

pub struct I2CRWRequestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> I2CRWRequestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_i2cstart(&mut self, i2cstart: bool) {
    self.fbb_.push_slot::<bool>(I2CRWRequest::VT_I2CSTART, i2cstart, true);
  }
  #[inline]
  pub fn add_i2caddr(&mut self, i2caddr: u8) {
    self.fbb_.push_slot::<u8>(I2CRWRequest::VT_I2CADDR, i2caddr, 0);
  }
  #[inline]
  pub fn add_i2cdata(&mut self, i2cdata: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(I2CRWRequest::VT_I2CDATA, i2cdata);
  }
  #[inline]
  pub fn add_i2creadbytes(&mut self, i2creadbytes: u32) {
    self.fbb_.push_slot::<u32>(I2CRWRequest::VT_I2CREADBYTES, i2creadbytes, 0);
  }
  #[inline]
  pub fn add_i2cstop(&mut self, i2cstop: bool) {
    self.fbb_.push_slot::<bool>(I2CRWRequest::VT_I2CSTOP, i2cstop, true);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> I2CRWRequestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    I2CRWRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<I2CRWRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for I2CRWRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("I2CRWRequest");
      ds.field("i2cstart", &self.i2cstart());
      ds.field("i2caddr", &self.i2caddr());
      ds.field("i2cdata", &self.i2cdata());
      ds.field("i2creadbytes", &self.i2creadbytes());
      ds.field("i2cstop", &self.i2cstop());
      ds.finish()
  }
}
pub enum I2CResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct I2CResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for I2CResponse<'a> {
  type Inner = I2CResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> I2CResponse<'a> {
  pub const VT_ACK: flatbuffers::VOffsetT = 4;
  pub const VT_DATA: flatbuffers::VOffsetT = 6;
  pub const VT_ERROR_MESSAGE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    I2CResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args I2CResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<I2CResponse<'bldr>> {
    let mut builder = I2CResponseBuilder::new(_fbb);
    if let Some(x) = args.error_message { builder.add_error_message(x); }
    if let Some(x) = args.data { builder.add_data(x); }
    builder.add_ack(args.ack);
    builder.finish()
  }


  #[inline]
  pub fn ack(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(I2CResponse::VT_ACK, Some(false)).unwrap()}
  }
  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(I2CResponse::VT_DATA, None)}
  }
  #[inline]
  pub fn error_message(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(I2CResponse::VT_ERROR_MESSAGE, None)}
  }
}

impl flatbuffers::Verifiable for I2CResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("ack", Self::VT_ACK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("data", Self::VT_DATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("error_message", Self::VT_ERROR_MESSAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct I2CResponseArgs<'a> {
    pub ack: bool,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub error_message: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for I2CResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    I2CResponseArgs {
      ack: false,
      data: None,
      error_message: None,
    }
  }
}

pub struct I2CResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> I2CResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ack(&mut self, ack: bool) {
    self.fbb_.push_slot::<bool>(I2CResponse::VT_ACK, ack, false);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(I2CResponse::VT_DATA, data);
  }
  #[inline]
  pub fn add_error_message(&mut self, error_message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(I2CResponse::VT_ERROR_MESSAGE, error_message);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> I2CResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    I2CResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<I2CResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for I2CResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("I2CResponse");
      ds.field("ack", &self.ack());
      ds.field("data", &self.data());
      ds.field("error_message", &self.error_message());
      ds.finish()
  }
}
pub enum PacketOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Packet<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Packet<'a> {
  type Inner = Packet<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Packet<'a> {
  pub const VT_VERSION_MAJOR: flatbuffers::VOffsetT = 4;
  pub const VT_VERSION_MINOR: flatbuffers::VOffsetT = 6;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 8;
  pub const VT_CONTENTS_TYPE: flatbuffers::VOffsetT = 10;
  pub const VT_CONTENTS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Packet { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PacketArgs
  ) -> flatbuffers::WIPOffset<Packet<'bldr>> {
    let mut builder = PacketBuilder::new(_fbb);
    if let Some(x) = args.contents { builder.add_contents(x); }
    builder.add_contents_type(args.contents_type);
    builder.add_type_(args.type_);
    builder.add_version_minor(args.version_minor);
    builder.add_version_major(args.version_major);
    builder.finish()
  }


  #[inline]
  pub fn version_major(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(Packet::VT_VERSION_MAJOR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn version_minor(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(Packet::VT_VERSION_MINOR, Some(1)).unwrap()}
  }
  #[inline]
  pub fn type_(&self) -> PacketType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PacketType>(Packet::VT_TYPE_, Some(PacketType::I2CRWRequest)).unwrap()}
  }
  #[inline]
  pub fn contents_type(&self) -> PacketContents {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PacketContents>(Packet::VT_CONTENTS_TYPE, Some(PacketContents::NONE)).unwrap()}
  }
  #[inline]
  pub fn contents(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Packet::VT_CONTENTS, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_i2_crwrequest(&self) -> Option<I2CRWRequest<'a>> {
    if self.contents_type() == PacketContents::I2CRWRequest {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { I2CRWRequest::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_i2_cresponse(&self) -> Option<I2CResponse<'a>> {
    if self.contents_type() == PacketContents::I2CResponse {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { I2CResponse::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Packet<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("version_major", Self::VT_VERSION_MAJOR, false)?
     .visit_field::<u8>("version_minor", Self::VT_VERSION_MINOR, false)?
     .visit_field::<PacketType>("type_", Self::VT_TYPE_, false)?
     .visit_union::<PacketContents, _>("contents_type", Self::VT_CONTENTS_TYPE, "contents", Self::VT_CONTENTS, false, |key, v, pos| {
        match key {
          PacketContents::I2CRWRequest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<I2CRWRequest>>("PacketContents::I2CRWRequest", pos),
          PacketContents::I2CResponse => v.verify_union_variant::<flatbuffers::ForwardsUOffset<I2CResponse>>("PacketContents::I2CResponse", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct PacketArgs {
    pub version_major: u8,
    pub version_minor: u8,
    pub type_: PacketType,
    pub contents_type: PacketContents,
    pub contents: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for PacketArgs {
  #[inline]
  fn default() -> Self {
    PacketArgs {
      version_major: 0,
      version_minor: 1,
      type_: PacketType::I2CRWRequest,
      contents_type: PacketContents::NONE,
      contents: None,
    }
  }
}

pub struct PacketBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PacketBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_version_major(&mut self, version_major: u8) {
    self.fbb_.push_slot::<u8>(Packet::VT_VERSION_MAJOR, version_major, 0);
  }
  #[inline]
  pub fn add_version_minor(&mut self, version_minor: u8) {
    self.fbb_.push_slot::<u8>(Packet::VT_VERSION_MINOR, version_minor, 1);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: PacketType) {
    self.fbb_.push_slot::<PacketType>(Packet::VT_TYPE_, type_, PacketType::I2CRWRequest);
  }
  #[inline]
  pub fn add_contents_type(&mut self, contents_type: PacketContents) {
    self.fbb_.push_slot::<PacketContents>(Packet::VT_CONTENTS_TYPE, contents_type, PacketContents::NONE);
  }
  #[inline]
  pub fn add_contents(&mut self, contents: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Packet::VT_CONTENTS, contents);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PacketBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Packet<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Packet<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Packet");
      ds.field("version_major", &self.version_major());
      ds.field("version_minor", &self.version_minor());
      ds.field("type_", &self.type_());
      ds.field("contents_type", &self.contents_type());
      match self.contents_type() {
        PacketContents::I2CRWRequest => {
          if let Some(x) = self.contents_as_i2_crwrequest() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        PacketContents::I2CResponse => {
          if let Some(x) = self.contents_as_i2_cresponse() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("contents", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Packet`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_unchecked`.
pub fn root_as_packet(buf: &[u8]) -> Result<Packet, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Packet>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Packet` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_packet_unchecked`.
pub fn size_prefixed_root_as_packet(buf: &[u8]) -> Result<Packet, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Packet>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Packet` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_unchecked`.
pub fn root_as_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Packet<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Packet<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Packet` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_unchecked`.
pub fn size_prefixed_root_as_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Packet<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Packet<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Packet and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Packet`.
pub unsafe fn root_as_packet_unchecked(buf: &[u8]) -> Packet {
  flatbuffers::root_unchecked::<Packet>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Packet and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Packet`.
pub unsafe fn size_prefixed_root_as_packet_unchecked(buf: &[u8]) -> Packet {
  flatbuffers::size_prefixed_root_unchecked::<Packet>(buf)
}
#[inline]
pub fn finish_packet_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Packet<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_packet_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Packet<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod BPIO2

